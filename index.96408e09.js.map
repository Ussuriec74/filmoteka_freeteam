{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,S,iBCAMC,EAAO,SAACC,EAAKC,GACjB,IACE,IAAMC,EAAkBC,KAAKC,UAAUH,GACvCI,aAAaC,QAAQN,EAAKE,GAC1B,MAAOK,GACPC,QAAQD,MAAM,oBAAqBA,EAAME,WCHvCC,EDOO,SAAAV,GACX,IACE,IAAME,EAAkBG,aAAaM,QAAQX,GAC7C,OAA2B,OAApBE,OAA2BU,EAAYT,KAAKU,MAAMX,GACzD,MAAOK,GACNC,QAAQD,MAAM,oBAAqBA,EAAME,UCZ/B,CADU,UAEzBD,QAAQM,IAAIJ,G,WCDZ,ICAMK,EAAaC,SAASC,cAAc,eAEpCC,EDFW,CACb,CACAC,IAAK,uFACLC,IAAK,kBAEOC,KAAN,iBACNC,IAAK,YAELC,IAAK,4BACLC,OAAQ,wDACRC,MAAO,qCAGP,CACAN,IAAK,uFACLC,IAAK,kBAEOC,KAAN,iBACNC,IAAK,YAELC,IAAK,4BACLC,OAAQ,wDACRC,MAAO,qCAGP,CACAN,IAAK,uFACLC,IAAK,kBAEOC,KAAN,iBACNC,IAAK,YAELC,IAAK,4BACLC,OAAQ,wDACRC,MAAO,qCAGP,CACAN,IAAK,uFACLC,IAAK,kBAELC,KAAM,iBACNC,IAAK,YAELC,IAAK,4BACLC,OAAQ,wDACRC,MAAO,sCC5CyBC,KAAI,SAAAC,G,IAAGR,EAAGQ,EAAHR,IAAKC,EAAGO,EAAHP,IAAKC,EAAIM,EAAJN,KAAMC,EAAGK,EAAHL,IAAKC,EAAGI,EAAHJ,IAAKC,EAAMG,EAANH,OAAQC,EAAKE,EAALF,MACzE,MAAM,gFAC+BG,OAAbT,EAAI,WAGqBS,OAHZR,EAAI,kHAIOQ,OADCP,EAAK,6DAIIO,OAHVN,EAAI,4LAUMM,OAPAH,EAAM,6ZAcNG,OAPAL,EAAI,4ZAOGK,OAAPJ,EAAO,+YASlEK,KAAK,IAERd,EAAWe,mBAAmB,YAAaZ,G,sBCtC3CrB,EAAAC,EAAA,UAIiB,IAAI,EAAAD,EAAAkC,UAEZC,cAAcC,MAAK,SAAAC,GACxBnC,EAJqB,SAIEmC,MLO3B,IAAMC,EAAW,IAAI,EAAAtC,EAAAkC,SAEfK,EAAO,CACTC,WAAYrB,SAASC,cAAc,gBACnCqB,aAActB,SAASC,cAAc,qBACrCsB,SAAUvB,SAASC,cAAc,YACjCuB,cAAexB,SAASC,cAAc,oBACtCwB,QAASzB,SAASC,cAAc,mBAMpCkB,EAASO,qBAAqBT,MAAK,SAAAC,GEtB5B,IF0BoBS,IAHLT,EAASU,QAI3BR,EAAKK,QAAQI,UAAkCF,EE1BjCjB,KAAI,SAAAC,G,IAAGmB,EAASnB,EAATmB,UAAWC,EAAEpB,EAAFoB,GAAIC,EAAKrB,EAALqB,MAAOC,EAAWtB,EAAXsB,YAAaC,EAAYvB,EAAZuB,aAAcC,EAAYxB,EAAZwB,aAE5DC,EAASH,EACb,kCAA8CrB,OAAZqB,GAClC,gEAWF,MAAO,0IAGoErB,OAAhCwB,EAAO,2BAA2DxB,OAAlCoB,EAAM,8BAE5CpB,OAFwEmB,EAAG,wFAI7EnB,OAFEoB,EAAM,uGAEmBpB,OAA3BkB,EAAUO,MAAM,EAAG,GAAG,OAA4DzB,OAAvDsB,EAAaG,MAAM,EAAG,GAAG,gCAAsDzB,OAAxBuB,EAAaG,QAAQ,GAAG,2EAI9IzB,KAAK,OFGEb,SAASC,cAAc,MAGrCkB,EAASO,qBAAqBT,MAAK,SAAAsB,GACjC/C,QAAQM,IAAIyC,GACZ,IAAMC,EAAOD,EAAEC,KACTC,EAAaF,EAAEG,aAErB,EAAAC,EAAA5B,SAAW0B,EAAYD,M","sources":["src/index.js","src/js/local-storage-service.js","src/js/createMarkup.js","src/js/team-data.js","src/js/render-team-card.js","src/js/get-genres.js"],"sourcesContent":["import FilmsApiService from './js/fetch-api';\nimport { cardMurkup } from './js/cardMurkup';\n// import onHeaderBtnClick from './js/current-header-button';\n\nimport pagination from './js/pagination';\nimport { createHomeCardsMarkup } from './js/createMarkup';\nimport './js/footerModal';\nimport './js/team-data';\nimport './js/render-team-card';\nimport './js/spinner';\nimport './js/film-modal';\nimport './js/get-genres';\nimport onHeaderBtnClick from './js/color-change-header-btn';\n\nconst filmsApi = new FilmsApiService();\n\nconst refs = {\n    searchForm: document.querySelector('.header-form'),\n    searchButton: document.querySelector('.header-form__btn'),\n    filmCard: document.querySelector('.gallery'),\n    headerButtons: document.querySelector('.header__buttons'),\n    gallery: document.querySelector('.gallery__list'),\n}\n\n// refs.searchForm.addEventListener('submit', onSearch);\n// refs.headerButtons.addEventListener('click', onHeaderBtnClick);\n\nfilmsApi.fetchTrendingFilms().then(response => {\n    renderHomeGallery(response.results);\n})\n\nfunction renderHomeGallery(markup) {\n    refs.gallery.innerHTML = createHomeCardsMarkup(markup);\n}\n\nconst ulTag = document.querySelector('ul');\n// console.log(pagination);\n\nfilmsApi.fetchTrendingFilms().then(r => {\n  console.log(r);\n  const page = r.page;\n  const totalPages = r.total_pages;\n  //   console.log(page, totalPages);\n  pagination(totalPages, page);\n});\n\n// refs.searchForm.addEventListener('submit', onSearch);\n\n// function onSearch(event) {\n//     event.preventDefault();\n\n//     filmsApi.query = event.currentTarget.elements.userSearchQuery.value;\n//     if (filmsApi.query === '') {\n//         return alert('пустая строка');\n//     }\n//     filmsApi.fetchFilmsOnSearch().then(data => {\n//         console.log(data);\n//         refs.filmCard.insertAdjacentHTML('beforeend', cardMurkup(data.results));\n//     });\n\n// }\n\n\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n     console.error(\"Get state error: \", error.message);\n  }\n};\n\nexport {\n  save,\n  load,\n};","import { save, load } from './local-storage-service';\nconst LOCALSTORAGE_KEY = \"genres\";\nconst genres = load(LOCALSTORAGE_KEY);\nconsole.log(genres);\n\nexport function createHomeCardsMarkup(movies) {\n    return movies.map(({ genre_ids, id, title, poster_path, release_date, vote_average }) => {\n        \n        const imgUrl = poster_path\n        ? `https://image.tmdb.org/t/p/w500${poster_path}`\n        : 'https://via.placeholder.com/150/360505/FFFFFF/?Text=No-poster';\n      \n\t\t\tlet movieGenre = \"\";\n\t\t\t\n\t\t\t// for (const genre of genres) {\n\t\t\t// \tif (genre_ids.includes(genre.id)) {\n\t\t\t// \t\tmovieGenre = g.name;\n\t\t\t// \t}\n\t\t\t// }\n\n\t\t\t// let res = genres.map(genre => return genre_ids.includes(genres.name));\n        return `\n        <li class=\"gallery__item\">\n            <a href=\"\" class=\"gallery__link\" >\n                <img class=\"gallery__image\" src=\"${imgUrl}\" alt=\"Movie poster of ${title}\" loading=\"lazy\" data-id=\"${id}\"/>\n                <div class=\"info\">\n                    <h2 class=\"info-title\">${title}</h2>\n\t\t\t\t\t\t\t\t\t\t<div class=\"meta-wrap\"></div>\n                    <p class=\"info-item\">${genre_ids.slice(0, 2)} | ${release_date.slice(0, 4)}<span class=\"content-rates\">${vote_average.toFixed(2)}</span></p>\n                </div>\n            </a>\n        </li>`\n    }).join('');\n};","export {teamDAta}\n\nconst teamDAta = [\n    {\n    img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/1200px-Cat03.jpg',\n    alt: \"кто-то тут есть\",\n  \n    name: 'Maksym Kidanov',\n    pos: \"Developer\",\n\n    git: 'https://github.com/Eldiwr',\n    linked: 'https://www.linkedin.com/in/maksym-kidanov-53b08b21a/',\n    insta: 'https://www.instagram.com/eldiwr/',\n    },\n\n    {\n    img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/1200px-Cat03.jpg',\n    alt: \"кто-то тут есть\",\n  \n    name: 'Maksym Kidanov',\n    pos: \"Developer\",\n\n    git: 'https://github.com/Eldiwr',\n    linked: 'https://www.linkedin.com/in/maksym-kidanov-53b08b21a/',\n    insta: 'https://www.instagram.com/eldiwr/',\n    },\n\n    {\n    img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/1200px-Cat03.jpg',\n    alt: \"кто-то тут есть\",\n  \n    name: 'Maksym Kidanov',\n    pos: \"Developer\",\n\n    git: 'https://github.com/Eldiwr',\n    linked: 'https://www.linkedin.com/in/maksym-kidanov-53b08b21a/',\n    insta: 'https://www.instagram.com/eldiwr/',\n    },\n\n    {\n    img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/1200px-Cat03.jpg',\n    alt: \"кто-то тут есть\",\n  \n    name: 'Maksym Kidanov',\n    pos: \"Developer\",\n\n    git: 'https://github.com/Eldiwr',\n    linked: 'https://www.linkedin.com/in/maksym-kidanov-53b08b21a/',\n    insta: 'https://www.instagram.com/eldiwr/',\n},\n    \n]","import { teamDAta } from \"./team-data\";\n\nconst memberCard = document.querySelector('.team__list');\n\nconst cardOfMemberRender = teamDAta.map(({ img, alt, name, pos, git, linked, insta }) => {\n    return`<li class=\"team__item\">                          \n                <img src=\"${img}\" alt=\"${alt}\" width = 260> \n\n                <div class=\"team-div\">\n                    <h3 class=\"team-div__employee\">${name}</h3>\n                    <p class=\"team-div__position\">${pos}</p>\n                    <ul class=\"team-div__list\">                \n                        <li class=\"team-div__item\">\n                            <a class=\"team-div__link\" href=\"${insta}\">\n                                <svg class=\"team-div__icon\" width=\"20\" height=\"20\"> \n                                    <use href=\"/src/images/social-icons.svg#icon-instagram\"></use> \n                                </svg>\n                            </a>\n                        </li>\n                        <li class=\"team-div__item\">\n                            <a class=\"team-div__link\" href=\"${git}\">\n                                <svg class=\"team-div__icon\" width=\"20\" height=\"20\"> \n                                    <use href=\"/src/images/social-icons.svg#icon-linkedin\"></use> \n                                </svg>\n                            </a>\n                        </li>\n                        <li class=\"team-div__item\">\n                            <a class=\"team-div__link\" href=\"${linked}\">\n                                <svg class=\"team-div__icon\" width=\"20\" height=\"20\"> \n                                    <use href=\"/src/images/social-icons.svg#icon-git\"></use> \n                                </svg>\n                            </a>\n                        </li>                                  \n                    </ul>\n                </div>\n            </li>`\n}).join('');\n\nmemberCard.insertAdjacentHTML('beforeend', cardOfMemberRender);\n\n","import FilmsApiService from './fetch-api';\nimport { save, load } from './local-storage-service';\n\nconst LOCALSTORAGE_KEY = \"genres\";\nconst filmsApi = new FilmsApiService();\n\nfilmsApi.fetchGenres().then(response => {\n    save(LOCALSTORAGE_KEY, response);    \n}\n);"],"names":["$18yUV","parcelRequire","$01bbf5cd4a9f24f3$export$a1544dad697b423d","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","$7406f4e6957bfce5$var$genres","getItem","undefined","parse","log","$34eec2f2d7a8f607$var$memberCard","document","querySelector","$34eec2f2d7a8f607$var$cardOfMemberRender","img","alt","name","pos","git","linked","insta","map","param","concat","join","insertAdjacentHTML","default","fetchGenres","then","response","$b8f9b7833fa37166$var$filmsApi","$b8f9b7833fa37166$var$refs","searchForm","searchButton","filmCard","headerButtons","gallery","fetchTrendingFilms","markup","results","innerHTML","genre_ids","id","title","poster_path","release_date","vote_average","imgUrl","slice","toFixed","r","page","totalPages","total_pages","$jcFG7"],"version":3,"file":"index.96408e09.js.map"}