{"mappings":"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","sources":["src/librari.js","src/js/film-modal-lib.js","src/js/color-change-header-btn.js","src/js/library-render.js"],"sourcesContent":["import './js/pagination';\nimport './js/footerModal';\nimport './js/team-data';\nimport './js/render-team-card';\nimport './js/spinner';\nimport './js/film-modal-lib';\nimport './js/color-change-header-btn';\nimport './js/library-render';","import FilmsApiService from \"./fetch-api\";\nimport { filmModalMarkup } from \"./film-modal-markup\";\nimport {\n    addToStorage,\n    addToStorageWhenNull,\n    removeFromStorage,\n    checkItemInStorage,\n} from './storage';\nimport { inStorageWatched } from \"./storage\";\nimport { inStorageQueue } from \"./storage\";\n\nconst filmsApiService = new FilmsApiService();\nlet id;\nlet markup = \"\";\nconst ADD_TO_WATCHED = 'Add to watched';\nconst ADD_TO_QUEUE = 'Add to queue';\nconst REMOVE_FROM_WATCHED = 'Remove from watched';\nconst REMOVE_FROM_QUEUE = 'Remove from queue';\n\nlet refs = {\n    gallery: document.querySelector(\".library-gallery__list\"),\n    backdrop: document.querySelector(\".modal-backdrop\"),\n    closeFilmModalBtn: \"\",\n    addToWatched: \"\",\n    addToQueue: \"\",\n}\n\ncheckItemInStorage(\"watchedFilms\", \"queueFilms\", []);\nrefs.gallery.addEventListener('click', onOpenFilmModal);\n\nasync function onOpenFilmModal(e) {\n    e.preventDefault();\n    refs.gallery.removeEventListener('click', onOpenFilmModal);\n    id = e.target.dataset.id;\n            \n    if (e.target.nodeName !== 'IMG') {\n      return;\n    }\n    toggleModal();\n    await getFilmModal(id);\n        \n    refs.addToWatched.addEventListener('click', onAddToWatchedClick);\n    refs.addToQueue.addEventListener('click', onAddToQueueClick);\n}\n\nconst getFilmModal = async (filmID) => {\n    try {\n        const data = await filmsApiService.fetchFilmById(filmID);\n        const listOfGenders = await data.genres.map(genre => genre.name).join(', ');\n        const filmData = {...data, listOfGenders};\n        // console.log(filmData);\n        markup = filmModalMarkup(filmData);\n        refs.backdrop.innerHTML = markup;\n        \n        refs.closeFilmModalBtn = document.querySelector(\"[data-modal-close]\");\n        refs.addToWatched = document.querySelector(\".add-to-watched\");\n        refs.addToQueue = document.querySelector(\".add-to-queue\");\n        \n        await onWatchedButtonTextWhenOpenModal(filmID);\n        await onQueueButtonTextWhenOpenModal(filmID);\n        await determineButtonStateWhenOpenModal();\n        \n        refs.closeFilmModalBtn.addEventListener('click', onCloseFilmModal);\n        refs.backdrop.addEventListener('click', onBackdropClose);\n        window.addEventListener('keydown', onEscapeClose);\n\n        return refs.backdrop;\n    }\n\n    catch (error) {\n        console.log(error.message);\n    }\n}\n\nfunction onCloseFilmModal(e) {\n    e.preventDefault();\n    refs.gallery.addEventListener('click', onOpenFilmModal);\n    toggleModal();\n    refs.backdrop.innerHTML = \"\";\n    removeAllEventListeners();\n}\n\nfunction onEscapeClose(e) {\n    e.preventDefault();\n    if (e.code === 'Escape') {\n        refs.gallery.addEventListener('click', onOpenFilmModal);\n        toggleModal();\n        refs.backdrop.innerHTML = \"\";\n        removeAllEventListeners();\n    }\n}\n\nfunction onBackdropClose(e) {\n    e.preventDefault();\n    if (e.currentTarget === e.target) {\n        refs.gallery.addEventListener('click', onOpenFilmModal);\n        toggleModal();\n        refs.backdrop.innerHTML = \"\";\n        removeAllEventListeners();\n    }\n}\n\nfunction toggleModal() {\n    refs.backdrop.classList.toggle(\"is-hidden\");\n}\n\nfunction removeAllEventListeners() {\n    refs.closeFilmModalBtn.removeEventListener('click', onCloseFilmModal);\n    window.removeEventListener('keydown', onEscapeClose);\n    refs.backdrop.removeEventListener('click', onBackdropClose);\n}\n\nfunction onAddToWatchedClick(e) {\n    e.preventDefault();\n    id = e.target.dataset.modalaction;\n    console.log(id);\n    console.log(\"Ви натиснули на кнопку WATCHED, ID цієї картки - \", id);\n    if (localStorage.getItem(\"watchedFilms\") == null) {\n        addToStorageWhenNull(\"watchedFilms\", id);\n    }\n    if (!inStorageWatched(id)) {\n        // отримуємо дані з localStorage, розпарсуємо дані у масив (watchedArray)\n        // додаємо новий id до нього та записуємо до localStorage\n        addToStorage(\"watchedFilms\", id);\n        // змінюємо назву та стан активності кнопок після кліку\n        refs.addToWatched.textContent = REMOVE_FROM_WATCHED;\n        refs.addToWatched.classList.add('is-in-storage');\n    } else {\n        // отримуємо дані з localStorage, розпарсуємо дані у масив (watchedArray)\n        // видаляємо наш id з масиву та записуємо дані до localStorage\n        removeFromStorage(\"watchedFilms\", id);\n        // змінюємо назву та стан активності кнопок після кліку\n        refs.addToWatched.textContent = ADD_TO_WATCHED;\n        refs.addToWatched.classList.remove('is-in-storage');\n    }\n}\n\nfunction onAddToQueueClick(e) {\n    e.preventDefault();\n    console.log(\"Ви натиснули на кнопку QUEUE, ID цієї картки - \", id);\n    if (localStorage.getItem(\"queueFilms\") == null) {\n        addToStorageWhenNull(\"queueFilms\", id);\n    }\n    if (!inStorageQueue(id)) {\n        // отримуємо дані з localStorage, розпарсуємо дані у масив (watchedArray)\n        // додаємо новий id до нього та записуємо до localStorage\n        addToStorage(\"queueFilms\", id);\n        // змінюємо назву та стан активності кнопок після кліку\n        refs.addToQueue.textContent = REMOVE_FROM_QUEUE;\n        refs.addToQueue.classList.add('is-in-storage');\n\n    } else {\n        // отримуємо дані з localStorage, розпарсуємо дані у масив (watchedArray)\n        // видаляємо наш id з масиву та записуємо дані до localStorage\n        removeFromStorage(\"queueFilms\", id);\n        // змінюємо назву та стан активності кнопок після кліку\n        refs.addToQueue.textContent = ADD_TO_QUEUE;\n        refs.addToQueue.classList.remove('is-in-storage');\n    }\n}\n\n// пишемо текст кнопок, коли модалка відкривається\n\nfunction onWatchedButtonTextWhenOpenModal(id) {\n    if(!inStorageWatched(id)) {\n        refs.addToWatched.textContent = ADD_TO_WATCHED;\n        return;\n    }\n    if(inStorageWatched(id)) {\n        refs.addToWatched.textContent = REMOVE_FROM_WATCHED;\n    }\n}\n\nfunction onQueueButtonTextWhenOpenModal(id) {\n    if(!inStorageQueue(id)) {\n        refs.addToQueue.textContent = ADD_TO_QUEUE;\n        return;\n    }\n    if(inStorageQueue(id)) {\n        refs.addToQueue.textContent = REMOVE_FROM_QUEUE;\n    }\n}\n\n// встановлюємо стан активності кнопок при відкритті модалки \n// з урахуванням localStorage\n\nfunction determineButtonStateWhenOpenModal() {\n    if (refs.addToWatched.textContent === ADD_TO_WATCHED) {\n        refs.addToWatched.classList.remove('is-in-storage');\n    } else {\n        refs.addToWatched.classList.add('is-in-storage');\n    }\n    \n    if (refs.addToQueue.textContent === ADD_TO_QUEUE) {\n        refs.addToQueue.classList.remove('is-in-storage');\n    } else {\n        refs.addToQueue.classList.add('is-in-storage');\n    }\n}\n\n","const refs = {\n    headerButtons: document.querySelector('.header__buttons'),\n}\n\nrefs.headerButtons.addEventListener('click', onHeaderBtnClick);\n\nfunction onHeaderBtnClick(e){\n    if(e.target.nodeName !== 'BUTTON'){\n        return\n    }\n\n    const currentActivBtn = document.querySelector('.current__button');\n    const nextActivBtn = e.target;\n    \n    if(currentActivBtn){\n        currentActivBtn.classList.remove('current__button');\n    }\n    nextActivBtn.classList.add('current__button')\n}","import FilmsApiService from './fetch-api';\nimport { load } from './local-storage-service';\nimport { renderLibrary, clearLibraryGallery } from './templates/render-gallery';\n\nconst WATCHED_KEY = 'watchedFilms';\nconst QUEUE_KEY = 'queueFilms';\n\nconst refs = {\n  watchedBtn: document.querySelector('[name=\"watched\"]'),\n  queueBtn: document.querySelector('[name=\"queue\"]')\n}\n\nconst fetchApi = new FilmsApiService();\nconst queueMovies = load(QUEUE_KEY);\nconst watchedMovies = load(WATCHED_KEY);\n\nonWatchedClick();\n\nrefs.watchedBtn.addEventListener('click', onWatchedClick);\nrefs.queueBtn.addEventListener('click', onQueueClick);\n\n\nfunction onWatchedClick() {\n  clearLibraryGallery();\n  watchedMovies.map(movieId =>\n    fetchApi.fetchFilmById(movieId).then(response => {\n      renderLibrary(response);\n    })\n  )\n};\n\nfunction onQueueClick() {\n  clearLibraryGallery();\n  queueMovies.map(movieId =>\n  fetchApi.fetchFilmById(movieId).then(response => {\n  renderLibrary(response);\n  })\n)\n};\n\n\n\n"],"names":["parcelRequire","$i3bGI","$8d637e035e0ed853$var$filmsApiService","default","$8d637e035e0ed853$var$id","$8d637e035e0ed853$var$markup","$8d637e035e0ed853$var$refs","gallery","document","querySelector","backdrop","closeFilmModalBtn","addToWatched","addToQueue","async","$8d637e035e0ed853$var$onOpenFilmModal","e","preventDefault","removeEventListener","target","dataset","id","nodeName","$8d637e035e0ed853$var$toggleModal","$8d637e035e0ed853$var$getFilmModal","addEventListener","$8d637e035e0ed853$var$onAddToWatchedClick","$8d637e035e0ed853$var$onAddToQueueClick","$5uEKZ","checkItemInStorage","filmID","data","fetchFilmById","listOfGenders","genres","map","genre","name","join","filmData","$5dNya","filmModalMarkup","innerHTML","id1","inStorageWatched","textContent","$8d637e035e0ed853$var$onWatchedButtonTextWhenOpenModal","id2","inStorageQueue","$8d637e035e0ed853$var$onQueueButtonTextWhenOpenModal","classList","remove","add","$8d637e035e0ed853$var$determineButtonStateWhenOpenModal","$8d637e035e0ed853$var$onCloseFilmModal","$8d637e035e0ed853$var$onBackdropClose","window","$8d637e035e0ed853$var$onEscapeClose","error","console","log","message","$8d637e035e0ed853$var$removeAllEventListeners","code","currentTarget","toggle","modalaction","localStorage","getItem","addToStorageWhenNull","removeFromStorage","addToStorage","headerButtons","currentActivBtn","nextActivBtn","$652f0e6c9547df91$var$refs","watchedBtn","queueBtn","$652f0e6c9547df91$var$fetchApi","$652f0e6c9547df91$var$queueMovies","$bcxib","load","$652f0e6c9547df91$var$watchedMovies","$652f0e6c9547df91$var$onWatchedClick","$5r59o","clearLibraryGallery","movieId","then","response","renderLibrary"],"version":3,"file":"library.9c968028.js.map"}